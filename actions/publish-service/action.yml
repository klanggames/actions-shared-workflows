name: Publish Service Docker Image
description: Publishes an Docker image to a GCR.
inputs:
  project_path:
    description: The folder of project to publish
    required: true
  workload_identity_provider:
    description: gcloud workload identity provider
    required: true
  service_account:
    description: gcloud service account email
    required: true
  images:
    description: docker image names (multiline)
    required: true
  service_version:
    description: service version
    required: true
  platforms:
    description: "csl of docker build platforms: linux/amd64,linux/arm64"
    default: linux/amd64,linux/arm64
    required: false
  context:
    description: docker file context
    default: .
    required: false
  build_args:
    description: docker build arguments (multiline)
    required: false
  token:
    description: github token to access private NuGet registries
    default: ${{ github.token }}
    required: false

runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - id: "auth"
      uses: "google-github-actions/auth@v0"
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}

    - uses: google-github-actions/setup-gcloud@v0

    - run: |-
        gcloud --quiet auth configure-docker
      shell: bash

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.images }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          ${{ inputs.service_version }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        platforms: ${{ inputs.platforms }}
        context: ${{ inputs.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ${{ inputs.build_args }}
          SVC_VERSION=${{ inputs.service_version }}
          PROJECT_PATH=${{ inputs.project_path }}
          GITHUB_TOKEN=${{ inputs.token }}

    - shell: bash
      run: |
          echo "::group::Docker Tags"
          echo "::notice::${{ steps.meta.outputs.tags }}"
          echo "::endgroup::"
          echo "::group::Docker Labels"
          echo "::notice::${{ steps.meta.outputs.labels }}"
          echo "::endgroup::"

    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        hide_and_recreate: true
        hide_classify: "OUTDATED"
        header: Docker Tags and Labels
        message: |
          ### Tags
          ```
          ${{ steps.meta.outputs.tags }}
          ```
          ### Labels
          ```
          ${{ steps.meta.outputs.labels }}
          ```
      continue-on-error: true