name: Publish Docker Image
description: Publishes an Docker image to a GAR.
inputs:
  workload_identity_provider:
    description: gcloud workload identity provider
    required: true
  service_account:
    description: gcloud service account email
    required: true
  images:
    description: docker image names (multiline)
    required: true
  tag:
    description: image tag
    required: true
  platforms:
    description: "csl of docker build platforms: linux/amd64"
    default: linux/amd64
    required: false
  context:
    description: docker file context
    default: .
    required: false
  file:
    description: path to the docker file
    required: false
  build_args:
    description: docker build arguments (multiline)
    required: false
  token:
    description: github token to access private NuGet registries
    default: ${{ github.token }}
    required: false

runs:
  using: composite
  steps:
    - uses: marocchino/sticky-pull-request-comment@v2
      if: github.event.pull_request
      with:
        GITHUB_TOKEN: ${{ github.token }}
        header: images-${{ inputs.images }}
        message: |
          ## Publishing Docker images `${{ inputs.images }}` for changes in ${{ github.event.pull_request.head.sha }}
          :warning: being published... please stand by!

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - id: auth
      name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0
      with:
        token_format: access_token
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        access_token_lifetime: 300s

    - name: Login to Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: europe-west1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.images }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          ${{ inputs.tag }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        platforms: ${{ inputs.platforms }}
        context: ${{ inputs.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          ${{ inputs.build_args }}
          GITHUB_TOKEN=${{ inputs.token }}

    - shell: bash
      run: |
        echo "::group::Docker Tags"
        echo "::notice::${{ steps.meta.outputs.tags }}"
        echo "::endgroup::"

    - name: Inform about success
      if: success()
      shell: bash
      run: |
        echo >>${{ inputs.images }}-pr-comment.txt "## Publishing Docker images `${{ inputs.images }}` for changes in ${{ github.event.pull_request.head.sha }}"
        echo >>${{ inputs.images }}-pr-comment.txt
        echo >>${{ inputs.images }}-pr-comment.txt "### Tags"
        echo >>${{ inputs.images }}-pr-comment.txt
        echo >>${{ inputs.images }}-pr-comment.txt '```'
        echo >>${{ inputs.images }}-pr-comment.txt "${{ steps.meta.outputs.tags }}"
        echo >>${{ inputs.images }}-pr-comment.txt '```'
        echo >>${{ inputs.images }}-pr-comment.txt '+1 Success publishing docker images'
        cat ${{ inputs.images }}-pr-comment.txt >>$GITHUB_STEP_SUMMARY

    - name: Inform about failure
      if: failure()
      shell: bash
      run: |
        echo >>${{ inputs.images }}-pr-comment.txt "## Publishing Docker images `${{ inputs.images }}` for changes in ${{ github.event.pull_request.head.sha }}"
        echo >>${{ inputs.images }}-pr-comment.txt
        echo >>${{ inputs.images }}-pr-comment.txt ':boom: Publishing docker images failed. Please see details in Actions output.'
        cat ${{ inputs.images }}-pr-comment.txt >>$GITHUB_STEP_SUMMARY

    - uses: marocchino/sticky-pull-request-comment@v2
      with:
        GITHUB_TOKEN: ${{ github.token }}
        header: images-${{ inputs.images }}
        path: ${{ inputs.images }}-pr-comment.txt
